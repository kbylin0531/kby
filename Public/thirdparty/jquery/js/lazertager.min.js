/**
 * Create By Lin.
 * Email:784855684@qq.com
 * Version:1.0.0617
 */


var LazerTager  = function () {
    //私有?
    var pro = LazerTager.prototype;
    var env = this;

    env.config = new Object();
    /* 基础元素构建 js代码构建 */
    //主体容器构建
    pro._ul = document.createElement('ul');
    pro._ul.style.listStyle= 'none';//连字符形式改为驼峰样式
    //添加按钮构建,成为其子元素
    pro._liaddtag = document.createElement('li');
    pro._liaddtag.setAttribute('class','lt-addtag');
    pro._addtaga = document.createElement('a');
    pro._addtaga.setAttribute('class','lt_inneraddli');
    pro._addtaga.innerHTML = '+&nbsp;';
    pro._liaddtag.appendChild(pro._addtaga);
    pro._ul.appendChild(pro._liaddtag);
    //单体项构建
    pro._litagc = document.createElement('li');
    pro._litagc.setAttribute('class','lt-tagc');
    pro._litagcat = document.createElement('a');
    pro._litagcat.setAttribute('class','lt-text lt-innertext');
    pro._litagcad = document.createElement('span');
    pro._litagcad.setAttribute('class','lt-close lt-innertext');
    pro._litagcad.innerHTML = '&nbsp;x&nbsp;';
    pro._litagc.appendChild(pro._litagcat);
    pro._litagc.appendChild(pro._litagcad);


    window.console = window.console || (function(){
        var c = {}; c.log = c.warn = c.debug = c.info = c.error = c.time = c.dir = c.profile
            = c.clear = c.exception = c.trace = c.assert = function(){};
        return c;
    })();


    /*-- 配置项IO  --*/
    pro.has = function (key) {
        return  key in env.config;
    };
    pro.set = function (key,val,force) {
        if(env.has(key) || force === true ){
            env.config[key] = val;
            return true;
        }
        return false;
    };
    pro.get = function (key) {
        return env.config[key];
    };

    //获得主体的深度克隆 jquery===true或者参数省略表示需要获得包装后的jquery对象
    pro.getCarrierClone = function (jquery) {
        return jquery === undefined || jquery === true?$(pro._ul.cloneNode(true)):pro._ul.cloneNode(true);
    };
    //获得单体的深度克隆  其他同上
    pro.getEntityClone = function (jquery) {
        return jquery === undefined || jquery === true?$(pro._litagc.cloneNode(true)):pro._litagc.cloneNode(true);
    };

    /**
     * 判断调用者是否是主体
     * @param dom
     */
    Object.prototype.isCallerCarrier = function () {
        var caller = 'jquery' in this?this.get(0):this;//jquery对象都有该属性记录版本信息
        return caller.nodeName !== undefined && caller.nodeName.toUpperCase() == 'UL';
    };
    /**
     * 判断调用者是否是单体
     * @param dom
     * @returns {string|nodeName|jQuery.nodeName|boolean}
     */
    Object.prototype.isCallerEntity = function(){
        var caller = 'jquery' in this?this.get(0):this;//jquery对象都有该属性记录版本信息
        return caller.nodeName !== undefined && caller.nodeName.toUpperCase() == 'LI';
    };




    /*--------------------- 事件处理,文本显示的个性化设置 ---------------------------------------------------------------------*/
    /**
     * 为主体添加"添加事件"
     * @param callback 回调函数，必须先声明
     * @param param 回调参数
     * @returns {*}
     */
    Object.prototype.setCarrierAddHandler = function (callback,param) {
        //console.log(this.isCallerCarrier(),this.isCallerEntity());
        if(this.isCallerCarrier()) {
            this.find('.lt_inneraddli').click(function () {
                callback(param);
            });
        }
        return this;
    };
    Object.prototype.setEntityText = function (text) {
        //console.log('setEntityText',this,this.isCallerEntity());
        if(this.isCallerEntity()) {
            //console.log('setEntityText',this);
            this.find('.lt-text').text(text);
        }
        return this;
    };
    Object.prototype.setEntityTextClickHandler = function (callback,param) {
        if(this.isCallerEntity()) {
            this.find('.lt-text').click(function () {
                callback(param);
            });
        }
        return this;
    };
    Object.prototype.setEntityDeleteHandler = function (callback,param) {
        if(this.isCallerEntity()) {
            this.find('.lt-close').click(function () {
                var litag = $(this).parent('li');//this 指向<span>x</span>  litag指向顶层li
                callback.call(litag,param);
            });
        }
        return this;
    };
    Object.prototype.appendLitem = function (litem) {
        if(this.isCallerCarrier()) {
            var addtag = this.find('.lt-addtag').eq(0);
            litem.insertBefore(addtag);
        }
        return this;
    };
    Object.prototype.attachTarget = function(target){
        var tgt = target === undefined?env.getTarget():target;
        tgt.append(this);
    };
    Object.prototype.deleteEntitySelf = function(){
        if(this.isCallerEntity()){
            console.log(this);
            //this.remove();//因为未知原因无法删除，因此采用以下方法
            this.css('display','none');
        }
        return this;
    };
    /*--------------------------- 处理结束 --------------------------------------------------------------*/

    pro.getTarget = function () {
        var target = env.has('target')?env.get('target'):env.has('targetid') && env.get('targetid') != ''?$('#'+ $.trim(env.get('targetid'))).eq(0):$(document.body);
        return target;
    };



    pro.init = function (obj) {
        env.config['targetid'] = '';
        for( var x in obj){
            //自带是否存在判断
            if(env.has(x)){
                pro.set(x,obj[x]);
            }
        }
        env.config.target = pro.getTarget();
        return env;
    };




    //pro.demo = function(){
    //    var cb = function (param) {
    //        console.log('callback :  '+param);
    //    };
    //
    //    var cc = pro.getCarrierClone().setCarrierAddHandler(cb,'add');
    //    var ce = pro.getEntityClone().setEntityText('this is test').setEntityDeleteHandler(cb,'delete')
    //        .setEntityTextClickHandler(cb,'text clicked');
    //    cc.appendLitem(ce);
    //    env.get('target').append(cc);
    //};



};
